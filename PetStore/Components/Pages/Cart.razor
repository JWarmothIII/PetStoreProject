@page "/cart"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IPetService PetService
@inject IStateService StateService
@inject IUserAccountService UserAccountService
@attribute [StreamRendering]

<h3>Shopping Cart</h3>
@if (cartItems != null && cartItems.Any())
{
    <div class="list-group">
        @foreach (var pet in cartItems)
        {
            <div class="list-group-item">
                <h5 class="mb-1">@pet.Type</h5>
                <p class="mb-1">Breed: @pet.Breed</p>
                <p class="mb-1">Age: @pet.Age</p>
                <p class="mb-1">Price: @pet.Price</p>
            </div>
            <button @onclick="() => RemoveFromCart(pet.Id)" class="btn btn-primary">Remove From Cart</button>
        }
    </div>
<br />
<br />
    <button @onclick="EmptyCart" class="btn btn-danger">Empty Cart</button>

    <button class="btn btn-primary" @onclick="GoToCheckout">Checkout</button>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private List<Pet> cartItems;

    void GoToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = StateService.UserId;

        if (userId != null)
        {
            var user = await UserAccountService.GetUserAccountById(userId);

            if (!string.IsNullOrEmpty(user?.Cart))
            {
                cartItems = JsonSerializer.Deserialize<List<Pet>>(user.Cart);
            }
        }
    }

    private async Task EmptyCart()
    {
        var userId = StateService.UserId;

        if (userId != null)
        {

            var user = await UserAccountService.GetUserAccountById(userId);

            if (user.Cart != null)
            {
                user.Cart = null;
                await UserAccountService.UpdateAccount(user);

                cartItems = new List<Pet>();
            }
        }
    }

   private async Task RemoveFromCart(int petId)
{
    var userId = StateService.UserId;

    if (userId != null)
    {
        var user = await UserAccountService.GetUserAccountById(userId);

        if (!string.IsNullOrEmpty(user?.Cart))
        {
            cartItems = JsonSerializer.Deserialize<List<Pet>>(user.Cart);

            
            var indexToRemove = cartItems.FindIndex(p => p.Id == petId);

            if (indexToRemove >= 0)
            {
                cartItems.RemoveAt(indexToRemove); 
                user.Cart = JsonSerializer.Serialize(cartItems);
                await UserAccountService.UpdateAccount(user);
            }
        }
    }
}
}
