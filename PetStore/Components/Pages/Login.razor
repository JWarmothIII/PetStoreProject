@page "/login"
@using PetStore.Shared.Entities
@using PetStore.Shared.Services
@inject NavigationManager NavigationManager
@inject IUserAccountService UserAccountService
@inject IStateService StateService
@rendermode InteractiveServer

<h3>PasswordBox</h3>

<div class="card bg-light mt-3" style="width: 30rem">
    <div class="card-body">
        <h3 class="card-title">Password Testing</h3>
        <p class="card-text">
            @if (errorMessage != null)
            {
            <p class="text-danger">@errorMessage</p>
            }
        </p>
        <div class="mb-3 row">
            <label for="inputEmail" class="col-sm-3 col-form-label">Email:</label>
            <div class="col-sm-9">
                <input required type="email" class="form-control" id="inputEmail" @bind="email" />
            </div>
        </div>
        <div class="mb-3 row">
            <label for="inputPassword" class="col-sm-3 col-form-label">Password:</label>
            <div class="col-sm-9">
                <input @oninput="OnPasswordChanged"
                       required
                       type="@(showPassword ? "text" : "password")"
                       class="form-control"
                       id="inputPassword"
                       value="@password" />
                <span class="text-danger">@validationMessage</span>
            </div>
        </div>

        <div class="row">
            <div class="col-6">
                <button class="btn btn-primary" @onclick="ToggleShowPassword">
                    Show password
                </button>

                <button class="btn btn-primary" @onclick="LoginToAccount">
                    Login
                </button>
            </div>
            <div>
                <br>
                <button @onclick="GoToAddAccount" class="btn btn-primary">Click here to create a new account</button>

            </div>
        </div>
    </div>
</div>



@code {
    void GoToAddAccount()
    {
        NavigationManager.NavigateTo("/addAccount");
    }
    private string errorMessage;
    string email;
    private bool showPassword;
    private string? password;
    private string? validationMessage;

    [Parameter]
    public string? Password { get; set; }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    private Task OnPasswordChanged(ChangeEventArgs e)
    {
        password = e?.Value?.ToString();

        if (password != null && password.Contains(' '))
        {
            validationMessage = "Password Cannot contain spaces";

            return Task.CompletedTask;
        }
        else
        {
            validationMessage = string.Empty;

            return PasswordChanged.InvokeAsync(password);
        }
    }

    private void ToggleShowPassword()
    {
        showPassword = !showPassword;
    }
    private async Task LoginToAccount()
    {


        var userAccount = await UserAccountService.Login(email, password);

        if (userAccount == null)
        {
            errorMessage = "Invalid email or password.";
        }

        else if (userAccount.Role == "Admin")
        {
            StateService.SetLoggedInState(true, true, userAccount.Email, userAccount.UserID);
            NavigationManager.NavigateTo("/addPets");
        }
        else
        {
            StateService.SetLoggedInState(true, false, userAccount.Email, userAccount.UserID);
            NavigationManager.NavigateTo("/account");
        }


    }
    //AdminTest@email.com
    //PasswordTest123
    //4111111111111111
    //12/25
}