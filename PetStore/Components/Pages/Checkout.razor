@page "/checkout"
@using PetStore.Shared.Entities
@using PetStore.Shared.Services
@using System.Text.RegularExpressions
@inject IPetService PetService
@inject NavigationManager NavigationManager
@inject IUserAccountService UserAccountService
@inject IStateService StateService
@rendermode InteractiveServer
@attribute [StreamRendering]

<h3 class="mt-4">Checkout</h3>

@if (cartItems != null && cartItems.Any())
{
    <div class="order-summary mt-4">
        <h4>Order Summary</h4>
        <ul>
            @foreach (var item in cartItems)
            {
                <li>@item.Name - $@item.Price </li>
            }
        </ul>
        <p>Total: $@CalculateTotal()</p>
    </div>
    <div class="payment-section mt-4">
        <h4>Payment Information</h4>
        <EditForm Model="@paymentModel" OnValidSubmit="@SubmitPayment">
            <div class="mb-3">
                <label for="card-number" class="form-label">Card Number:</label>
                <InputText id="card-number" @bind-Value="paymentModel.CardNumber" class="form-control" placeholder="Enter card number" required />
                <ValidationMessage For="@(() => paymentModel.CardNumber)" />
            </div>
            <div class="mb-3">
                <label for="expiry-date" class="form-label">Expiry Date:</label>
                <InputText id="expiry-date" @bind-Value="paymentModel.ExpiryDate" class="form-control" placeholder="MM/YY" required />
                <ValidationMessage For="@(() => paymentModel.ExpiryDate)" />
            </div>
            <div class="mb-3">
                <label for="cvv" class="form-label">CVV:</label>
                <InputText id="cvv" @bind-Value="paymentModel.CVV" class="form-control" placeholder="CVV" required />
                <ValidationMessage For="@(() => paymentModel.CVV)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit Payment</button>
        </EditForm>
    </div>
}
else
{
    <p>Your cart is empty.</p>
}

@if (showConfirmationModal)
{

    <div class="modal fade show" id="confirmationModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmationModal"></button>
                </div>
                <div class="modal-body">
                    Checkout complete!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="ReturnToAvailablePets">OK</button>
                </div>
            </div>
        </div>
    </div>
}
@code {

    private bool showConfirmationModal = false;

    private PaymentModel paymentModel = new PaymentModel();
    private List<Pet> cartItems;
    private async Task SubmitPayment()
    {
        var userId = StateService.UserId;

        if (userId != null)
        {
            var user = await UserAccountService.GetUserAccountById(userId);

            if (user != null && !string.IsNullOrEmpty(user.Cart))
            {
                var cartItems = JsonSerializer.Deserialize<List<Pet>>(user.Cart);

                var currentHistory = string.IsNullOrEmpty(user.History) ? new List<Pet>() : JsonSerializer.Deserialize<List<Pet>>(user.History);
                currentHistory.AddRange(cartItems);
                user.History = JsonSerializer.Serialize(currentHistory);

                user.Cart = null;


                await UserAccountService.UpdateAccount(user);

              
                foreach (var pet in cartItems)
                {
                    await PetService.DeletePet(pet.Id);
                }
            }
        }

        showConfirmationModal = true;
    }


    protected override async Task OnInitializedAsync()
    {
        var userId = StateService.UserId;

        if (userId != null)
        {
            var user = await UserAccountService.GetUserAccountById(userId);

            if (!string.IsNullOrEmpty(user?.Cart))
            {
                cartItems = JsonSerializer.Deserialize<List<Pet>>(user.Cart);
            }
        }
    }

    private decimal CalculateTotal()
    {
        return cartItems.Sum(item => item.Price);
    }
    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
    }

    private void ReturnToAvailablePets()
    {
        showConfirmationModal = false;
        NavigationManager.NavigateTo("/cart");
    }
 

}
